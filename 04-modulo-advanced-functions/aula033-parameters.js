// =============================================================
// Curso de JavaScript e TypeScript
// Prof¬∫ Luiz Ot√°vio Miranda
// Aula 33 - Par√¢metros de Fun√ß√£o em JavaScript
// Isabelli Cristina Mocci - 01/04/2025
// =============================================================


/*
    üîπ Par√¢metros de Fun√ß√£o:

    Par√¢metros s√£o as vari√°veis que a fun√ß√£o recebe para executar uma tarefa.
      ‚Æ° funcionam como entradas para a fun√ß√£o
      ‚Æ° podem ser utilizados dentro da fun√ß√£o

    üîπ Tipos de par√¢metros:
    
    ‚Üí 1. Par√¢metros Normais: par√¢metro b√°sico definido na declara√ß√£o da fun√ß√£o.
    ‚Üí 2. Par√¢metros Opcionais: atribui valor padr√£o para par√¢metro ausente.
    ‚Üí 3. Rest Parameters (`...`): passa um n√∫mero indefinido de par√¢metros para a fun√ß√£o.
    ‚Üí 4. Par√¢metros com Desestrutura√ß√£o: desestrutura os valores diretamente na declara√ß√£o da fun√ß√£o.
*/

// =============================================================
// üîπ Par√¢metros Normais
// =============================================================

/*
  ‚ùìS√£o os par√¢metros definidos diretamente na assinatura da fun√ß√£o. 
    ‚Æ° DEVEM ser passados quando a fun√ß√£o for chamada.

  Exemplo:
*/

function saudacao(nome) { // ‚Üê par√¢metro normal
  return `Ol√°, ${nome}!`;
}

console.log(saudacao("Isa")); // "Ol√°, Isa!"

// =============================================================
// üîπ Par√¢metros Opcionais (com valor padr√£o)
// =============================================================

/*
  ‚ùìEm chamadas de fun√ß√£o sem valor ‚Üí √© poss√≠vel dar valor padr√£o para o par√¢metro.
    ‚Æ° evita que valores `undefined` apare√ßam em opera√ß√µes.

  Exemplo:
*/

function calcularSoma(a, b = 5, c = 10) { // ‚Üê valores padr√£o
  return a + b + c;
}

console.log(calcularSoma(2)); // Sa√≠da: 17 (2 + 5 + 10)
console.log(calcularSoma(2, 3)); // Sa√≠da: 15 (2 + 3 + 10)
console.log(calcularSoma(2, undefined, 6)); // Sa√≠da: 13 (2 + 5 + 6)

// =============================================================
//  üîπ Fun√ß√£o com `arguments`:
// =============================================================

/*
  ‚ùì O objeto `arguments` cont√©m todos os par√¢metros passados para a fun√ß√£o,
  independente de quantos forem fornecidos.
  
  ‚ùì`arguments` √© tratado como uma cole√ß√£o (n√£o um array real), mas pode ser iterado.

  Exemplo:
*/

function somarTodos() {
  let total = 0;
  for (let argumento of arguments) {
    total += argumento;
  }
  return total;
}

console.log(somarTodos(1, 2, 3, 4, 5)); // Sa√≠da: 15

// =============================================================
//  üîπ Fun√ß√£o com Par√¢metros Fixos:
// =============================================================

/*
  ‚ùìFun√ß√µes podem ter par√¢metros fixos.
    ‚Æ° ‚ö†Ô∏è caso falte informa√ß√£o sobre os argumentos, eles ser√£o nomeados como `undefined`.

  Exemplo:
*/

function exibirValores(a, b, c, d) {
  console.log(a, b, c, d);
}

exibirValores(1, 2); // Sa√≠da: 1 2 undefined undefined

// =============================================================
//  üîπ Fun√ß√£o com Desestrutura√ß√£o (Objetos):
// =============================================================

/*
  ‚ùì Desestrutura os valores de um OBJETO diretamente nos par√¢metros da fun√ß√£o.
    ‚Æ° facilita o acesso aos valores internos.

  Exemplo:
*/

function exibirDadosPessoa({ nome, idade, cidade }) {
  return `${nome} tem ${idade} anos e mora em ${cidade}.`;
}

const pessoa = { nome: "Isa", idade: 25, cidade: "S√£o Paulo" };
console.log(exibirDadosPessoa(pessoa)); // "Isa tem 25 anos e mora em S√£o Paulo."

// =============================================================
//  üîπ Fun√ß√£o com Desestrutura√ß√£o (Arrays):
// =============================================================

/*
  ‚ùì Desestrutura os valores de um ARRAY diretamente nos par√¢metros da fun√ß√£o.
    ‚Æ° facilita o acesso aos valores individuais.

  Exemplo:
*/

function calcularMedia([nota1, nota2, nota3]) {
  return (nota1 + nota2 + nota3) / 3;
}

const notas = [7, 8, 9];
console.log(calcularMedia(notas)); // Sa√≠da: 8

// =============================================================
//  üîπ Fun√ß√£o com Rest Parameters (`...`):
// =============================================================

/*
  ‚ùì O operador `...` captura um n√∫mero indefinido de par√¢metros e os coloca em um array.
  ‚Æ° Isso permite trabalhar com fun√ß√µes que podem receber um n√∫mero vari√°vel de argumentos.

  Exemplo:
*/

function calcularMediaVariada(operador, ...numeros) {
  let resultado = numeros[0];
  for (let i = 1; i < numeros.length; i++) {
    if (operador === "+") resultado += numeros[i];
    if (operador === "-") resultado -= numeros[i];
    if (operador === "*") resultado *= numeros[i];
    if (operador === "/") resultado /= numeros[i];
  }
  return resultado;
}

console.log(calcularMediaVariada("+", 1, 2, 3, 4)); // Sa√≠da: 10 (1 + 2 + 3 + 4)
console.log(calcularMediaVariada("*", 2, 3, 4)); // Sa√≠da: 24 (2 * 3 * 4)

/*
  üîπ Fun√ß√£o An√¥nima com Rest Parameters:
    ‚Æ° fun√ß√µes an√¥nimas podem ser usadas com `...` para capturar m√∫ltiplos argumentos.

  Exemplo:
*/

const gerarMensagem = function (tipo, ...mensagens) {
  let mensagemFinal = `${tipo} MENSAGEM: `;
  // Concatena todas as mensagens passadas
  mensagemFinal += mensagens.join(" - ");
  return mensagemFinal;
};

// Exemplos de uso
console.log(gerarMensagem("INFO", "Sistema iniciado", "Processo em andamento", "Tudo certo!"));
// Sa√≠da: "INFO MENSAGEM: Sistema iniciado - Processo em andamento - Tudo certo!"

console.log(gerarMensagem("ERRO", "Falha na conex√£o", "Tente novamente mais tarde"));
// Sa√≠da: "ERRO MENSAGEM: Falha na conex√£o - Tente novamente mais tarde"

console.log(gerarMensagem("AVISO", "Espa√ßo de armazenamento quase cheio"));
// Sa√≠da: "AVISO MENSAGEM: Espa√ßo de armazenamento quase cheio"

// =============================================================