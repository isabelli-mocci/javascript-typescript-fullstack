// =============================================================
// Curso de JavaScript e TypeScript - Aula 39: Factory Functions
// Professor: Luiz Ot√°vio Miranda
// Criado por: Isabelli Cristina Mocci
// Data: 03/04/2025
// =============================================================

// =============================================================
// üîπ Factory Functions (Fun√ß√µes F√°brica)
// =============================================================

/*
    üîπ  O que s√£o Factory Functions?
      ‚Æ° S√£o fun√ß√µes que CRIAM e RETORNAM objetos.
      ‚Æ° Elas recebem par√¢metros e devolvem objetos com propriedades e/ou m√©todos prontos pra uso.

    üîπ Vantagens no uso de Factory Functions:

    ‚Üí S√£o mais leg√≠veis e diretas pra objetos simples.
    ‚Üí Facilitam reuso e manuten√ß√£o de c√≥digo.
    ‚Üí Permite l√≥gica interna.
    ‚Üí Evitam as confus√µes do `this` quando usado fora do objeto.
    ‚Üí Perfeita pra gerar m√∫ltiplas inst√¢ncias din√¢micas.
*/

// =============================================================
// üîπ Exemplo 1 ‚Äì criaFada
// =============================================================

function criaFada(nome, asa) {
  return {
    nome,
    asa,
  };
}

const fada = criaFada("Belli", "brilhante");
console.log(fada);

// Sa√≠da: { nome: 'Belli', asa: 'brilhante' }

// =============================================================
// üîπ Exemplo 2 ‚Äì criaFada com m√©todo
// =============================================================

function criaFadaFalante(nome, asa) {
  return {
    nome,
    asa,
    falar() {
      // m√©todo (fun√ß√£o dentro de obj)
      return `${this.nome} diz: ‚ú® Ol√°, mortal! ‚ú®`;
    },
  };
}

console.log(criaFadaFalante("Isabelli", "de cristal").falar());

// Sa√≠da: Isabelli diz: ‚ú® Ol√°, mortal! ‚ú®

// =============================================================
// üîπ Exemplo 3 ‚Äì Diferen√ßa entre objetos independentes e objetos por refer√™ncia
// =============================================================

// Nesse exemplo cada carro √© um novo objeto (inst√¢ncias separadas):

function criaCarro(marca, modelo) {
  return { marca, modelo };
}

let carroA = criaCarro("BMW", "320i");
let carroB = criaCarro("Volkswagen", "Fusca");

carroA.marca = "Fiat"; // alterando apenas o carroA

console.log(carroA); // Sa√≠da: { marca: 'Fiat', modelo: '320i' }
console.log(carroB); // Sa√≠da: { marca: 'Volkswagen', modelo: 'Fusca' }

/*
  ‚¨ÜÔ∏è No caso acima, cada chamada de criaCarro() cria um NOVO objeto na mem√≥ria,
ent√£o alterar carroA n√£o afeta carroB.
*/

// ----------------------------------------------------------

// (perigo ‚ö†Ô∏è) Exemplo abaixo com objeto compartilhado por refer√™ncia:

let carro = { marca: "Volkswagen", modelo: "Fusca" };

function criaCarroCompartilhado() {
  return carro;
}

let c1 = criaCarroCompartilhado();
let c2 = criaCarroCompartilhado();

c1.marca = "BMW"; // alterando c1, mas c2 tamb√©m sofre...

console.log(c1); // Sa√≠da: { marca: 'BMW', modelo: 'Fusca' }
console.log(c2); // Sa√≠da: { marca: 'BMW', modelo: 'Fusca' }

/*
‚ùì O problema acontece porque a fun√ß√£o est√° sempre retornando o MESMO objeto, chamado `carro`.

‚û° Isso significa que c1 e c2 apontam para a MESMA refer√™ncia na mem√≥ria.
‚û° Ent√£o, mudar uma propriedade em c1 afeta automaticamente c2.
*/

// =============================================================
// üîπ Exemplo 4 ‚Äì criaPessoa com m√©todo e `this`
// =============================================================

function criaPessoa(nome, sobrenome) {
  return {
    nome,
    sobrenome,
    idade: 25,
    fala(assunto) {
      return `${this.nome} ${this.sobrenome}, dev de ${this.idade} anos, est√° ${assunto}.`;
    },
  };
}

const isa = criaPessoa("Isabelli", "Mocci");
console.log(isa.fala("aprendendo Factory Functions"));

// Sa√≠da: Isabelli Mocci, dev de 25 anos, est√° aprendendo Factory Functions.

// =============================================================
// üîπ Exemplo 5 ‚Äì criaPet com `getter` ehFilhote
// =============================================================
/*
üßô‚Äç‚ôÄÔ∏è Dica: d√° para usar `get` e `set` dentro da factory pra 
criar propriedades calculadas automaticamente ou controlar como valores
s√£o lidos e modificados.
*/

function criaPet(nome, especie, idade) {
  return {
    nome,
    especie,
    idade,
    falar() {
      return `${this.nome} (um ${this.especie}) quer brincar!`;
    },
    get ehFilhote() {
      return this.idade < 1; // se idade < 1, retorna true (filhote)
    },
  };
}

const gato = criaPet("Luna", "gato", 0.8);
console.log(gato.falar());
console.log("√â filhote?", gato.ehFilhote ? "Sim üêæ" : "N√£o üê±");

// Sa√≠da: √â filhote? Sim üêæ

// =============================================================
