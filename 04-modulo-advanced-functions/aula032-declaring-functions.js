// =============================================================
// Curso de JavaScript e TypeScript
// Prof¬∫ Luiz Ot√°vio Miranda
// Aula 32 - Maneiras de declarar fun√ß√µes em JavaScript
// Isabelli Cristina Mocci - 31/03/2025
// =============================================================

/*
    üîπ Fun√ß√µes em JavaScript:

    Fun√ß√µes em JavaScript s√£o `first-class citizens`
      ‚Æ° podem ser manipuladas como valores, ent√£o podem ser:
        ‚Üí Atribu√≠das a vari√°veis
        ‚Üí Passadas como argumentos para outras fun√ß√µes
        ‚Üí Retornadas de outras fun√ß√µes

    üîπ Formas de declarar fun√ß√µes:  

    ‚Üí 1. Declara√ß√£o de Fun√ß√£o: forma cl√°ssica (c/ hoisting)
          ‚Æ° `hoisting`: declara√ß√µes de fun√ß√µes s√£o "elevadas" para o topo do escopo, permitindo cham√°-las antes da declara√ß√£o
    ‚Üí 2. Express√£o de Fun√ß√£o: atribu√≠da a uma vari√°vel (s/ hoisting)
    ‚Üí 3. Arrow Function: sintaxe reduzida, n√£o tem seu pr√≥prio `this`
    ‚Üí 4. Fun√ß√£o como M√©todo: fun√ß√£o que pertence a um objeto (tem acesso ao `this`)

*/

// =============================================================
// üîπ Declara√ß√£o de Fun√ß√£o (sofre hoisting)
// =============================================================

/*
  ‚ùì Feita com a palavra `function` + nome + par√¢metros + bloco de c√≥digo. 

    Exemplo:
*/

function saudacao(nome) {
    return `Ol√°, ${nome}!`;
  }
  
  console.log(saudacao("Isa")); // "Ol√°, Isa!"

  // =============================================================
  // üîπ Express√£o de Fun√ß√£o (n√£o sofre hoisting)
  // =============================================================
  
  /*
    ‚ùì √â quando uma fun√ß√£o √© atribu√≠da a uma vari√°vel.
      ‚Æ°  fun√ß√£o an√¥nima (n√£o possui um nome)
      ‚Æ°  s√≥ pode ser chamada ap√≥s a sua declara√ß√£o 
  
      Exemplo:
  */

  const isaProgramando = function() { // ‚Üê express√£o de fun√ß√£o
    console.log('üñ•Ô∏è A Isa est√° codando sem parar! üíª‚ú®');
};

function executarRotina(rotina) { // ‚Üê fun√ß√£o recebe outra fun√ß√£o como argumento
    console.log('‚è≥ Preparando para executar a rotina da Isa...');
    rotina();
}

executarRotina(isaProgramando);

  // =============================================================
  // üîπ Arrow Functions (sintaxe reduzida)
  // =============================================================
  
  /*
    ‚ùìS√£o uma forma mais curta de escrever fun√ß√µes em JavaScript.
      ‚Æ°  N√£o possuem `this` pr√≥prio, herdando o contexto l√©xico.
  
      Exemplo:
  */
  
  const saudacaoArrow = (nome) => `E a√≠, ${nome}!`;
  
  console.log(saudacaoArrow("Isa")); // "E a√≠, Isa!"
  
  // =============================================================
  // üîπ Fun√ß√£o como M√©todo de um Objeto
  // =============================================================
  
  /*
    ‚ùìFun√ß√µes podem ser usadas como `m√©todos` de objetos.
      ‚Æ° `m√©todo` = fun√ß√£o que pertence a um objeto
      ‚Æ°  tem acesso ao `this`
  
      Exemplo:
  */
  
  const pessoa = {
    nome: "Isa",
    saudacao() { // ‚Üê m√©todo
      return `Oi, meu nome √© ${this.nome}!`;
    }
  };
  
  console.log(pessoa.saudacao()); // "Oi, meu nome √© Isa!"

  // =============================================================