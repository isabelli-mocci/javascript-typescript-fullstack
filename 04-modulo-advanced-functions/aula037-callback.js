// =============================================================
// Curso de JavaScript e TypeScript
// Prof¬∫ Luiz Ot√°vio Miranda
// Aula 37 - Fun√ß√£o Callback
// Isabelli Cristina Mocci - 01/04/2025
// =============================================================

/*
    üîπ Fun√ß√£o Callback

    Fun√ß√£o passada como argumento para outra fun√ß√£o, que ser√° executada dentro dessa fun√ß√£o ap√≥s algum evento ou opera√ß√£o ser conclu√≠da.

    üîπ Caracter√≠sticas do Callback:
      ‚Æ° ‚úÖ invocada ap√≥s o t√©rmino de uma opera√ß√£o (s√≠ncrona ou ass√≠ncrona).
      ‚Æ° ‚úÖ pode ser usada para garantir a execu√ß√£o de c√≥digo ap√≥s algum evento.
      ‚Æ° ‚úÖ vale em fun√ß√µes setTimeout, fetch, ou em loops e opera√ß√µes ass√≠ncronas.
      ‚Æ° ‚ùå A fun√ß√£o que recebe o callback pode ou n√£o passar algum argumento para o callback.

*/

// =============================================================
// üîπ Opera√ß√£o S√≠ncrona
// =============================================================

function somar(a, b, callback) {
  let resultado = a + b;
  callback(resultado); // callback √© chamado ap√≥s a opera√ß√£o de soma
}

somar(3, 4, function(resultado) {
  console.log(`O resultado da soma √©: ${resultado}`); // Sa√≠da: O resultado da soma √©: 7
});

// =============================================================
// üîπ Opera√ß√£o Ass√≠ncrona (com setTimeout):
// =============================================================

// Fun√ß√£o para gerar um tempo aleat√≥rio de execu√ß√£o
function rand(min = 1000, max = 3000) {
  const num = Math.random() * (max - min) + min;
  return Math.floor(num);
}

function f1(callback) {
  setTimeout(function() {
    console.log('f1');
    if (callback) callback();
  }, rand());
}

function f2(callback) {
  setTimeout(function() {
    console.log('f2');
    if (callback) callback();
  }, rand());
}

function f3(callback) {
  setTimeout(function() {
    console.log('f3');
    if (callback) callback();
  }, rand());
}

// Fun√ß√£o para controlar a sequ√™ncia de execu√ß√£o
function executar() {
  f1(function() {
    f2(function() {
      f3(function() {
        console.log('Ol√° mundo!');  // Mensagem final ap√≥s todas as fun√ß√µes
      });
    });
  });
}

executar();

// Sa√≠da:
//   f1
//   f2
//   f3
//   Ol√° mundo!

// =============================================================
// üîπ Callback garantindo a execu√ß√£o do c√≥digo ap√≥s evento
// =============================================================

function clicarBotao(callback) {
  console.log('Bot√£o clicado!');
  callback(); // callback √© chamado ap√≥s o clique
}

function mostrarMensagem() {
  console.log('A√ß√£o executada ap√≥s o clique no bot√£o!');
}

// Passando a fun√ß√£o mostrarMensagem() como callback
clicarBotao(mostrarMensagem);

// Sa√≠da:
//   Bot√£o clicado!
//   A√ß√£o executada ap√≥s o clique no bot√£o!

// =============================================================
// üîπ Fun√ß√£o COM argumento passado para o callback:
// =============================================================

function somar(a, b, callback) {
  let resultado = a + b;
  callback(resultado); // passando o resultado como argumento
}

somar(5, 10, function(resultado) {
  console.log(`O resultado da soma √©: ${resultado}`); // Sa√≠da: O resultado da soma √©: 15
});

// =============================================================
// üîπ Fun√ß√£o SEM argumento passado para o callback:
// =============================================================

function saudacao(callback) {
  console.log('Ol√°!');
  callback(); // n√£o passa argumento para o callback
}

saudacao(function() {
  console.log('Bem-vindo ao meu site!');
});

// Sa√≠da:
//   Ol√°!
//   Bem-vindo ao meu site!

// =============================================================