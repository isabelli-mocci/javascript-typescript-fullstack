// =============================================================
// Curso de JavaScript e TypeScript
// Prof¬∫ Luiz Ot√°vio Miranda
// Ex021 - Diferen√ßas entre "var", "let" e "const"
// Isabelli Cristina Mocci - 08/03/2025
// =============================================================

/*
    üîπ "var", "let" e "const" s√£o tr√™s formas de declarar vari√°veis em JavaScript. Cada um tem caracter√≠sticas diferentes, especialmente em rela√ß√£o ao escopo e mutabilidade.

    - `var`: 
        ‚Æ° Declara vari√°veis com escopo de fun√ß√£o ou global.
        ‚Æ° Pode ser redeclarado e atualizado.
        ‚Æ° Tem o comportamento de *hoisting* (i.e., √© "levantado" para o topo do escopo de execu√ß√£o).
    
    - `let`: 
        ‚Æ° Declara vari√°veis com escopo de bloco.
        ‚Æ° Pode ser atualizado, mas n√£o redeclarado dentro do mesmo escopo.
        ‚Æ° N√£o sofre *hoisting* como o `var`, mas o valor √© temporariamente "hoisted" para o bloco.
    
    - `const`: 
        ‚Æ° Declara vari√°veis com escopo de bloco.
        ‚Æ° Deve ser inicializada com um valor e n√£o pode ser reatribu√≠da depois.
        ‚Æ° Pode ser usada para declarar objetos ou arrays, mas o conte√∫do interno pode ser alterado.
*/

// =============================================================
// üîπ Exemplo com "var"
// =============================================================

// Declarando com var:
var numeroVar = 10;
console.log("N√∫mero (var):", numeroVar);

// Redeclarando com var (permitido):
var numeroVar = 20;
console.log("N√∫mero ap√≥s redeclara√ß√£o (var):", numeroVar);

// "Hoisting" com var - A vari√°vel √© elevada para o topo do escopo:
console.log("N√∫mero antes de ser declarado (var):", numeroVar);
var numeroVar = 30; // Mesmo sendo declarada depois, o valor aparece no console

// =============================================================
// üîπ Exemplo com "let"
// =============================================================

// Declarando com let:
let numeroLet = 10;
console.log("N√∫mero (let):", numeroLet);

// Tentando redeclarar com let (erro):
// let numeroLet = 20; // Uncaught SyntaxError: Identifier 'numeroLet' has already been declared

// Atualizando o valor com let (permitido):
numeroLet = 20;
console.log("N√∫mero ap√≥s atualiza√ß√£o (let):", numeroLet);

// Escopo de bloco com let:
if (true) {
    let numeroLetBloco = 30;
    console.log("N√∫mero dentro do bloco (let):", numeroLetBloco);
}
// console.log("N√∫mero fora do bloco (let):", numeroLetBloco); // ReferenceError: numeroLetBloco is not defined

// =============================================================
// üîπ Exemplo com "const"
// =============================================================

// Declarando com const:
const numeroConst = 10;
console.log("N√∫mero (const):", numeroConst);

// Tentando reatribuir com const (erro):
// numeroConst = 20; // Uncaught TypeError: Assignment to constant variable.

// Escopo de bloco com const:
if (true) {
    const numeroConstBloco = 30;
    console.log("N√∫mero dentro do bloco (const):", numeroConstBloco);
}
// console.log("N√∫mero fora do bloco (const):", numeroConstBloco); // ReferenceError: numeroConstBloco is not defined

// =============================================================
// üîπ Diferen√ßa entre "const" e "let" para Objetos/Arrays
// =============================================================

// Constante com objeto:
const pessoa = {
    nome: "Isabelli",
    idade: 25
};
console.log("Pessoa inicial:", pessoa);

// Modificando o conte√∫do de um objeto constante (permitido):
pessoa.idade = 26;
console.log("Pessoa ap√≥s modifica√ß√£o:", pessoa);

// Tentando redeclarar o objeto constante (erro):
// pessoa = { nome: "Matheus", idade: 30 }; // Uncaught TypeError: Assignment to constant variable.

// Constante com array:
const numeros = [1, 2, 3];
console.log("Array inicial:", numeros);

// Modificando o conte√∫do do array constante (permitido):
numeros.push(4);
console.log("Array ap√≥s modifica√ß√£o:", numeros);

// Tentando redeclarar o array constante (erro):
// numeros = [5, 6, 7]; // Uncaught TypeError: Assignment to constant variable.

// =============================================================
// üîπ Compara√ß√£o entre var, let e const
// =============================================================

console.log("Compara√ß√£o entre var, let e const:");

const comparacao = (tipo) => {
    switch (tipo) {
        case "var":
            console.log("Escopo de var: fun√ß√£o ou global, com hoisting e re-declara√ß√£o permitida.");
            break;
        case "let":
            console.log("Escopo de let: bloco, sem hoisting e re-declara√ß√£o n√£o permitida.");
            break;
        case "const":
            console.log("Escopo de const: bloco, n√£o pode ser reatribu√≠do, mas pode ser mutado (se objeto ou array).");
            break;
        default:
            console.log("Escolha 'var', 'let' ou 'const' para comparar.");
    }
};

// Teste da fun√ß√£o comparativa
comparacao("var");
comparacao("let");
comparacao("const");

// =============================================================
// üîπ Exemplos Finais
// =============================================================

// Utilizando var, let e const em um exemplo pr√°tico:
function exemplo() {
    var a = 1;
    let b = 2;
    const c = 3;

    if (true) {
        var a = 10; // var permite reatribui√ß√£o no mesmo escopo
        let b = 20; // let cria uma nova vari√°vel no bloco
        // const c = 30; // Erro: redeclara√ß√£o n√£o permitida com const
    }

    console.log("Valor de a (var):", a); // 10
    console.log("Valor de b (let):", b); // 2 (n√£o foi alterado no bloco)
    console.log("Valor de c (const):", c); // 3 (n√£o foi alterado)
}

// Chama a fun√ß√£o de exemplo
exemplo();
