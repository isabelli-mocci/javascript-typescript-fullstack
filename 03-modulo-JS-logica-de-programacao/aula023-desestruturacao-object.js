// =============================================================
// Curso de JavaScript e TypeScript
// Prof¬∫ Luiz Ot√°vio Miranda
// Ex023 - Atribui√ß√£o via Desestrutura√ß√£o (Objetos)
// Isabelli Cristina Mocci - 08/03/2025
// =============================================================

/*
    üîπ Desestrutura√ß√£o de Objetos:
    
    - A desestrutura√ß√£o permite extrair valores de um objeto e armazen√°-los em vari√°veis.
    - Diferente da desestrutura√ß√£o de arrays (que usa a ordem dos elementos), nos objetos a desestrutura√ß√£o √© feita pelo **nome das propriedades**.
    - Podemos definir valores padr√£o, renomear vari√°veis e at√© aninhar desestrutura√ß√µes dentro de objetos maiores.
*/

// =============================================================
// üîπ Exemplo B√°sico de Desestrutura√ß√£o de Objetos
// =============================================================

// Objeto com dados de um usu√°rio:
const usuario = {
  nome: "Isabelli",
  idade: 25,
  profissao: "Desenvolvedora Front-End",
  pais: "Brasil"
};

// Desestrutura√ß√£o:
const { nome, idade, profissao } = usuario;

console.log("Nome:", nome);            // Isabelli
console.log("Idade:", idade);          // 25
console.log("Profiss√£o:", profissao);  // Desenvolvedora Front-End

// =============================================================
// üîπ Renomeando Vari√°veis na Desestrutura√ß√£o
// =============================================================

// Podemos renomear os valores extra√≠dos para novas vari√°veis:
const { nome: nomeUsuario, idade: anos } = usuario;

console.log("Nome de usu√°rio:", nomeUsuario);  // Isabelli
console.log("Idade do usu√°rio:", anos);        // 25

// =============================================================
// üîπ Definindo Valores Padr√£o
// =============================================================

// Caso a propriedade n√£o exista no objeto, podemos definir um valor padr√£o:
const { cidade = "Desconhecida" } = usuario;
console.log("Cidade:", cidade); // Desconhecida

// =============================================================
// üîπ Desestrutura√ß√£o em Objetos Aninhados
// =============================================================

// Objeto mais complexo:
const empresa = {
  nome: "Tech Solutions",
  localizacao: {
      cidade: "S√£o Paulo",
      pais: "Brasil"
  }
};

// Desestruturando propriedades aninhadas:
const { nome: nomeEmpresa, localizacao: { cidade: cidadeEmpresa, pais: paisEmpresa } } = empresa;

console.log("Nome da empresa:", nomeEmpresa);      // Tech Solutions
console.log("Cidade da empresa:", cidadeEmpresa);  // S√£o Paulo
console.log("Pa√≠s da empresa:", paisEmpresa);      // Brasil

// =============================================================
// üîπ Usando Rest Operator com Objetos
// =============================================================

// Podemos capturar o restante das propriedades usando o operador "rest" (`...`)

const pessoa = {
  nome: "Matheus",
  idade: 27,
  cargo: "Desenvolvedor Back-End",
  empresa: "Tech Solutions"
};

const { nome: nomePessoa, ...restante } = pessoa;

console.log("Nome:", nomePessoa);  // Matheus
console.log("Restante das informa√ß√µes:", restante); // { idade: 27, cargo: "Desenvolvedor Back-End", empresa: "Tech Solutions" }

// =============================================================
// üîπ Desestrutura√ß√£o em Par√¢metros de Fun√ß√£o
// =============================================================

// Podemos desestruturar objetos diretamente nos par√¢metros de uma fun√ß√£o:
function apresentar({ nome, idade }) {
  return `Ol√°, meu nome √© ${nome} e tenho ${idade} anos.`;
}

console.log(apresentar(usuario)); // Ol√°, meu nome √© Isabelli e tenho 25 anos.

// =============================================================
// üîπ Fun√ß√£o com Valores Padr√£o e Desestrutura√ß√£o
// =============================================================

function criarPerfil({ nome, idade, profissao = "N√£o informado" }) {
  return `Usu√°rio: ${nome}, Idade: ${idade}, Profiss√£o: ${profissao}`;
}

console.log(criarPerfil({ nome: "Lucas", idade: 30 })); // Usu√°rio: Lucas, Idade: 30, Profiss√£o: N√£o informado

// =============================================================
// üîπ Exemplo Completo com V√°rios Conceitos
// =============================================================

const produto = {
  nome: "Notebook",
  preco: 4500,
  fabricante: {
      nome: "Dell",
      ano: 2024
  }
};

// Desestruturando:
const { nome: nomeProduto, preco, fabricante: { nome: marca, ano } } = produto;

console.log("Produto:", nomeProduto);    // Notebook
console.log("Pre√ßo:", preco);            // 4500
console.log("Marca:", marca);            // Dell
console.log("Ano de fabrica√ß√£o:", ano);  // 2024

// =============================================================
// üîπ Desestrutura√ß√£o em Objetos Dentro de Arrays
// =============================================================

const alunos = [
  { nome: "Isabelli", nota: 9.5 },
  { nome: "Matheus", nota: 8.7 }
];

// Pegando os dois primeiros alunos:
const [aluno1, aluno2] = alunos;

// Desestruturando os objetos dentro do array:
const { nome: nomeAluno1, nota: notaAluno1 } = aluno1;
const { nome: nomeAluno2, nota: notaAluno2 } = aluno2;

console.log(`${nomeAluno1} tirou nota ${notaAluno1}`); // Isabelli tirou nota 9.5
console.log(`${nomeAluno2} tirou nota ${notaAluno2}`); // Matheus tirou nota 8.7

// =============================================================
// üîπ Uso Pr√°tico: Extraindo Configura√ß√µes de um Objeto
// =============================================================

const configuracoes = {
  tema: "dark",
  linguagem: "pt-BR",
  notificacoes: true
};

// Simulando um sistema que recebe configura√ß√µes:
function aplicarConfiguracoes({ tema, linguagem, notificacoes }) {
  console.log(`Tema: ${tema}`);
  console.log(`Idioma: ${linguagem}`);
  console.log(`Notifica√ß√µes: ${notificacoes ? "Ativadas" : "Desativadas"}`);
}

aplicarConfiguracoes(configuracoes);
// Sa√≠da:
// Tema: dark
// Idioma: pt-BR
// Notifica√ß√µes: Ativadas
