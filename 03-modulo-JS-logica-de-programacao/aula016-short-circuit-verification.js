// =============================================================
// Curso de JavaScript e TypeScript
// Prof¬∫ Luiz Ot√°vio Miranda
// Ex016 - Verifica√ß√£o de Curto-Circuito em JavaScript
// Isabelli Cristina Mocci - 06/03/2025
// =============================================================

/*
    üîπ Curto-Circuito (Short-Circuit) em JavaScript

    Ocorre quando o JS n√£o avalia a 2¬™ parte de uma express√£o l√≥gica porque o resultado j√° √© determinado pela 1¬™ parte.
        ‚Æ° Isso acontece nos operadores l√≥gicos AND (&&) e OR (||)
        ‚Æ° √ötil para evitar a execu√ß√£o de fun√ß√µes que n√£o s√£o necess√°rias
        ‚Æ° Ou verificar se uma condi√ß√£o j√° √© suficiente para uma decis√£o
*/

// =============================================================
// üîπ Curto-Circuito com AND (&&)
// =============================================================

// O operador AND (&&) vai retornar `true` apenas se ambas as express√µes forem verdadeiras. Se a primeira for `false`, ele **n√£o** precisa avaliar a segunda

let a = false;
let b = true;

console.log("a && b:", a && b); 

// Exemplo de curto-circuito com AND
let x = 0;  // Valor "falsy"
let y = 10;

console.log("x && y:", x && y);  // 0, porque x √© falsy e n√£o avalia y

// Exemplo com valor "truthy"
let z = 5;  // Valor "truthy"
let w = 10;

console.log("z && w:", z && w);  // 10, porque z √© truthy, ent√£o avalia w e retorna w

// =============================================================
// üîπ Curto-Circuito com OR (||)
// =============================================================

// O operador OR (||) vai retornar `true` se pelo menos uma das express√µes for `true`. Se a primeira for `true`, ele **n√£o** precisa avaliar a segunda

let p = true;
let q = false;

console.log("p || q:", p || q);  // true, porque p √© true, n√£o precisa verificar q

// Exemplo de curto-circuito com OR
let m = 5;  // Valor "truthy"
let n = 0;

console.log("m || n:", m || n);  // 5, porque m √© truthy e n√£o avalia n

// Exemplo com valor "falsy"
let a1 = false;  // Valor "falsy"
let b1 = 10;


console.log("a1 || b1:", a1 || b1);  // 10, porque a1 √© falsy, ent√£o avalia b1 e retorna b1

// =============================================================
// üîπ Curto-Circuito com Fun√ß√µes
// =============================================================

// Curto-circuito pode ser √∫til para evitar a execu√ß√£o de fun√ß√µes que n√£o s√£o necess√°rias

// Exemplo com AND (&&) - A segunda fun√ß√£o n√£o √© chamada, pois a primeira √© falsy
function primeiraFuncao() {
    console.log("Primeira fun√ß√£o chamada");
    return false;  // Retorna false, vai impedir a chamada da segunda fun√ß√£o
}

function segundaFuncao() {
    console.log("Segunda fun√ß√£o chamada");
}

primeiraFuncao() && segundaFuncao();  // Segunda fun√ß√£o n√£o ser√° chamada porque a primeira retornou false

// Exemplo com OR (||) - A segunda fun√ß√£o ser√° chamada, pois a primeira retorna falsy
function terceiraFuncao() {
    console.log("Terceira fun√ß√£o chamada");
    return false;  // Retorna false, mas a segunda fun√ß√£o ainda √© chamada
}

function quartaFuncao() {
    console.log("Quarta fun√ß√£o chamada");
}

terceiraFuncao() || quartaFuncao();  // Quarta fun√ß√£o ser√° chamada, porque a terceira retornou false

// =============================================================
// üîπ Exemplo Pr√°tico com Curto-Circuito
// =============================================================

// Verificando se uma vari√°vel √© v√°lida antes de chamar uma fun√ß√£o
let usuario = {
    nome: "Isabelli",
    idade: 25,
};

// S√≥ chama a fun√ß√£o se o nome do usu√°rio for v√°lido
usuario.nome && console.log("Nome do usu√°rio:", usuario.nome);  // Exibe o nome porque a condi√ß√£o √© truthy

// Se a vari√°vel nome n√£o existir (falsy), a fun√ß√£o n√£o ser√° chamada
usuario.nome = null;
usuario.nome && console.log("Nome do usu√°rio:", usuario.nome);  // N√£o exibe nada, porque o nome √© falsy
