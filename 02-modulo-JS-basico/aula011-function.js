// =============================================================
// Curso de JavaScript e TypeScript
// ProfÂº Luiz OtÃ¡vio Miranda
// Ex011 - FunÃ§Ãµes em JavaScript
// Isabelli Cristina Mocci - 06/03/2025
// =============================================================

/*
    ğŸ”¹ O que sÃ£o FunÃ§Ãµes?

    - Em JavaScript, uma **funÃ§Ã£o** Ã© um bloco de cÃ³digo projetado para realizar uma tarefa especÃ­fica.
    - FunÃ§Ãµes podem receber entradas chamadas **parÃ¢metros** e podem retornar um valor.
    - Elas sÃ£o muito usadas para organizar e reutilizar o cÃ³digo.
*/

// =============================================================
// ğŸ”¹ Criando FunÃ§Ãµes
// =============================================================

/*
    FunÃ§Ã£o Simples
    - Uma funÃ§Ã£o simples pode ser criada usando a palavra-chave `function`, seguida pelo nome da funÃ§Ã£o.
*/
function saudacao() {
  console.log("OlÃ¡, seja bem-vindo!");
}
saudacao();  // Chama a funÃ§Ã£o e exibe: "OlÃ¡, seja bem-vindo!"

/*
  FunÃ§Ã£o com ParÃ¢metros
  - FunÃ§Ãµes podem aceitar entradas chamadas parÃ¢metros, que permitem passar dados para a funÃ§Ã£o.
*/
function saudacaoPersonalizada(nome) {
  console.log(`OlÃ¡, ${nome}!`);
}
saudacaoPersonalizada("Isabelli");  // Exibe: "OlÃ¡, Isabelli!"

// =============================================================
// ğŸ”¹ FunÃ§Ãµes com Retorno
// =============================================================

 /* 
    - FunÃ§Ãµes podem retornar um valor, que pode ser usado em outra parte do cÃ³digo.
 */ 

function soma(a, b) {
  return a + b;
}
const resultado = soma(5, 3);  // Chama a funÃ§Ã£o e armazena o resultado
console.log("Resultado da soma:", resultado);  // Exibe: 8

// =============================================================
// ğŸ”¹ FunÃ§Ãµes AnÃ´nimas e Arrow Functions
// =============================================================

/*
    - FunÃ§Ãµes tambÃ©m podem ser anÃ´nimas, ou seja, sem um nome, e geralmente sÃ£o usadas em expressÃµes.
*/
const saudacaoAnÃ´nima = function(nome) {
  console.log(`OlÃ¡, ${nome}!`);
};
saudacaoAnÃ´nima("Matheus");  // Exibe: "OlÃ¡, Matheus!"

/*
  Arrow Functions
  - As arrow functions sÃ£o uma forma mais curta de escrever funÃ§Ãµes em JavaScript.
*/
const saudacaoArrow = (nome) => {
  console.log(`OlÃ¡, ${nome}!`);
};
saudacaoArrow("Felipe");  // Exibe: "OlÃ¡, Felipe!"

// =============================================================
// ğŸ”¹ FunÃ§Ãµes com VÃ¡rios ParÃ¢metros e Valor PadrÃ£o
// =============================================================

/*
    - Uma funÃ§Ã£o pode aceitar vÃ¡rios parÃ¢metros, e vocÃª pode passar valores diferentes para cada um deles.
*/
function multiplicacao(a, b) {
    return a * b;
}
console.log("MultiplicaÃ§Ã£o:", multiplicacao(4, 2));  // Exibe: 8

/*
    FunÃ§Ã£o com Valor PadrÃ£o
    - Podemos atribuir um valor padrÃ£o para um parÃ¢metro caso ele nÃ£o seja passado.
*/
function saudacaoComIdioma(nome, idioma = "portuguÃªs") {
    console.log(`OlÃ¡, ${nome}! VocÃª fala ${idioma}.`);
}
saudacaoComIdioma("Carlos");  // Exibe: "OlÃ¡, Carlos! VocÃª fala portuguÃªs."
saudacaoComIdioma("Ana", "inglÃªs");  // Exibe: "OlÃ¡, Ana! VocÃª fala inglÃªs."

// =============================================================