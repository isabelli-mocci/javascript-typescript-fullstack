// =============================================================
// Curso de JavaScript e TypeScript
// Prof¬∫ Luiz Ot√°vio Miranda
// Ex013 - Diferen√ßa de Valor por Refer√™ncia e Valor Primitivo
// Isabelli Cristina Mocci - 06/03/2025
// =============================================================

/*
    üîπ O que s√£o valores primitivos e valores por refer√™ncia?

    - **Valores primitivos** s√£o tipos de dados que armazenam o valor diretamente, como n√∫meros, strings, booleanos, `null`, `undefined`, etc.
    - **Valores por refer√™ncia** s√£o tipos de dados que armazenam a refer√™ncia (ou endere√ßo de mem√≥ria) de um valor, como objetos, arrays, e fun√ß√µes.
    - A principal diferen√ßa √© como os dados s√£o copiados quando voc√™ os atribui a outra vari√°vel.
*/

// =============================================================
// üîπ Exemplos de Tipos Primitivos
// =============================================================

/*
    Tipos primitivos armazenam o valor diretamente. 
    Isso significa que, quando voc√™ copia uma vari√°vel primitiva para outra, a c√≥pia √© independente da original.
*/

let num1 = 10;
let num2 = num1;  // Copiando o valor de num1 para num2
console.log("num1:", num1);  // Exibe: 10
console.log("num2:", num2);  // Exibe: 10

num2 = 20;  // Modificando o valor de num2
console.log("num1 ap√≥s modificar num2:", num1);  // Exibe: 10
console.log("num2 ap√≥s modifica√ß√£o:", num2);  // Exibe: 20

// Note que, quando alteramos num2, o valor de num1 n√£o foi afetado, pois eles armazenam valores independentes.

// =============================================================
// üîπ Exemplos de Tipos por Refer√™ncia
// =============================================================

/*
    Objetos, arrays e fun√ß√µes s√£o exemplos de tipos por refer√™ncia. 
    Isso significa que, quando voc√™ copia uma vari√°vel que cont√©m um objeto ou array para outra, as duas vari√°veis apontam para o mesmo objeto/array na mem√≥ria.
*/

let pessoa1 = { nome: "Isabelli", idade: 25 };
let pessoa2 = pessoa1;  // Copiando a refer√™ncia de pessoa1 para pessoa2
console.log("pessoa1:", pessoa1);  // Exibe: { nome: "Isabelli", idade: 25 }
console.log("pessoa2:", pessoa2);  // Exibe: { nome: "Isabelli", idade: 25 }

pessoa2.idade = 26;  // Modificando a propriedade do objeto atrav√©s de pessoa2
console.log("pessoa1 ap√≥s modificar pessoa2:", pessoa1);  // Exibe: { nome: "Isabelli", idade: 26 }
console.log("pessoa2 ap√≥s modifica√ß√£o:", pessoa2);  // Exibe: { nome: "Isabelli", idade: 26 }

console.log("As vari√°veis pessoa1 e pessoa2 est√£o apontando para o mesmo objeto.");
// Aqui, ao modificar pessoa2, o valor de pessoa1 tamb√©m foi alterado, pois ambas apontam para o mesmo objeto.

// =============================================================
// üîπ Diferen√ßa de Comportamento entre Tipos Primitivos e Tipos por Refer√™ncia
// =============================================================

// Tipos primitivos s√£o passados por **valor**, ou seja, cada vari√°vel tem sua pr√≥pria c√≥pia.
let a = 5;
let b = a;  // Passando valor de a para b
b = 10;  // Modificando b
console.log("a:", a);  // Exibe: 5
console.log("b:", b);  // Exibe: 10

// Tipos por refer√™ncia s√£o passados por **refer√™ncia**, ou seja, a vari√°vel armazena o endere√ßo de mem√≥ria do valor.
let obj1 = { chave: "valor" };
let obj2 = obj1;  // Passando refer√™ncia de obj1 para obj2
obj2.chave = "novo valor";  // Modificando o valor do objeto
console.log("obj1:", obj1);  // Exibe: { chave: "novo valor" }
console.log("obj2:", obj2);  // Exibe: { chave: "novo valor" }

// Ambas as vari√°veis, obj1 e obj2, apontam para o mesmo objeto, ent√£o uma modifica√ß√£o afeta ambos.

// =============================================================
// üîπ Copiando Objetos ou Arrays (Quando voc√™ n√£o quer afetar o original)
// =============================================================

/*
    Se voc√™ quer fazer uma c√≥pia "independente" de um objeto ou array (sem afetar o original), voc√™ precisa copiar o valor, n√£o a refer√™ncia.
*/

// Copiando arrays
let frutas1 = ["Ma√ß√£", "Banana", "Morango"];
let frutas2 = [...frutas1];  // Usando spread para criar uma nova c√≥pia
frutas2[0] = "Uva";  // Alterando o primeiro valor de frutas2
console.log("frutas1:", frutas1);  // Exibe: ["Ma√ß√£", "Banana", "Morango"]
console.log("frutas2:", frutas2);  // Exibe: ["Uva", "Banana", "Morango"]

// Copiando objetos
let pessoaOriginal = { nome: "Matheus", idade: 30 };
let pessoaCopia = { ...pessoaOriginal };  // Usando spread para criar uma nova c√≥pia
pessoaCopia.idade = 31;  // Alterando a idade da c√≥pia
console.log("pessoaOriginal:", pessoaOriginal);  // Exibe: { nome: "Matheus", idade: 30 }
console.log("pessoaCopia:", pessoaCopia);  // Exibe: { nome: "Matheus", idade: 31 }

// Nesse caso, a altera√ß√£o em pessoaCopia n√£o afeta pessoaOriginal, pois agora s√£o objetos independentes.

// =============================================================
// üîπ Conclus√£o
// =============================================================

/*
    - **Valores primitivos**: S√£o copiados por **valor**. Modificar a c√≥pia n√£o afeta o valor original.
    - **Valores por refer√™ncia**: S√£o copiados por **refer√™ncia**. Modificar a c√≥pia afeta o valor original, pois ambos apontam para o mesmo valor na mem√≥ria.

    Para evitar problemas ao manipular objetos ou arrays, use t√©cnicas como **spread** ou **Object.assign()** para criar c√≥pias independentes.
*/

