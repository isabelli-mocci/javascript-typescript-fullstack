// =============================================================
// Curso de JavaScript e TypeScript
// Prof¬∫ Luiz Ot√°vio Miranda
// Ex007 - Manipula√ß√£o de Strings com Prompt e Alert
// Isabelli Cristina Mocci - 05/03/2025
// =============================================================

/*
    üîπ O que s√£o Strings?

    - Strings s√£o sequ√™ncias de caracteres, usadas para representar textos em JavaScript.
    - Sempre s√£o declaradas entre aspas:
        ‚úÖ Aspas simples   ‚Üí 'Texto'
        ‚úÖ Aspas duplas    ‚Üí "Texto"
        ‚úÖ Template String ‚Üí `Texto`
*/

// =============================================================

// üîπ Exemplos Simples de Strings:

const nome = "Isabelli";    // Aspas duplas
const sobrenome = 'Mocci';  // Aspas simples
const saudacao = `Ol√°, ${nome}!`; // Template String (permite interpola√ß√£o)

// =============================================================

// üîπ Escape de Caracteres em Strings:

console.log('Isso √© um \'texto\' entre aspas simples'); // Usa \ para escapar
console.log("Isso √© um \"texto\" entre aspas duplas"); // Mesmo conceito
console.log("Quebra de linha \nNova linha aqui!"); // \n para pular linha

// =============================================================

// üîπ Concatenando Strings:

const nomeCompleto = nome + " " + sobrenome; // Com operador +
console.log("Nome completo (concatena√ß√£o simples):", nomeCompleto);

const nomeCompletoTemplate = `${nome} ${sobrenome}`; // Com Template String
console.log("Nome completo (Template String):", nomeCompletoTemplate);

// =============================================================

//               01234567
let umaString = "Um texto";

// üéØ Acessando caracteres na string
console.log(umaString[4]);         // Retorna 'e' (caractere na posi√ß√£o 4)
console.log(umaString[8]);         // Retorna undefined (√≠ndice inexistente)
console.log(umaString.charAt(6));  // Retorna 't' (caractere na posi√ß√£o 6)

// =============================================================

// üîé Buscando dentro da string
console.log(umaString.indexOf("texto"));  // Retorna posi√ß√£o onde "texto" come√ßa
console.log(umaString.indexOf("rosa"));   // Retorna -1 (a string "rosa" n√£o existe)

// =============================================================

// üî† Express√µes regulares (RegEx)
console.log(umaString.match(/[a-z]/g)); // Retorna todas as letras min√∫sculas da string
console.log(umaString.match(/[a-z]/));  // Retorna apenas a primeira letra min√∫scula encontrada

// =============================================================

// üîÑ Substitui√ß√£o de valores
console.log(umaString.replace("Um", "Outro")); // Troca "Um" por "Outro"
console.log(umaString.replace(/t/g, "#"));     // Substitui todos os 't' por '#'

// =============================================================

// üî§ Mudando caixa (mai√∫sculas/min√∫sculas)
console.log(umaString.toLocaleLowerCase()); // Deixa tudo min√∫sculo
console.log(umaString.toLocaleUpperCase()); // Deixa tudo MAI√öSCULO

// =============================================================

// ‚úÇÔ∏è slice() ‚Üí Recorta partes da string
console.log(umaString.slice(3));      // "texto" (corta a partir do √≠ndice 3)
console.log(umaString.slice(0, 2));   // "Um" (recorta do √≠ndice 0 ao 1)
console.log(umaString.slice(-5));     // (recorta os √∫ltimos 5 caracteres)
console.log(umaString.slice(-5, -2)); // "tex" (recorta do √≠ndice -5 ao -3)

// =============================================================

// üî™ split() ‚Üí Divide a string em um array
console.log(umaString.split(" "));  // ["Um", "texto"] (divide pelo espa√ßo)
console.log(umaString.split(""));   // ["U", "m", " "] (divide cada caractere)
console.log(umaString.split("t"));  // ["Um ", "ex", "o"] (remove os "t" e divide)

// =============================================================

// üßπ trim() ‚Üí Remove espa√ßos extras
console.log(umaString.trim());      // (remove espa√ßos no in√≠cio e no fim)
console.log(umaString.trimStart()); // "Um texto   " (s√≥ remove os do come√ßo)
console.log(umaString.trimEnd());   // "   Um texto" (s√≥ remove os do final)
