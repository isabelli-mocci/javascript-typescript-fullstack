// =============================================================
// Curso de JavaScript e TypeScript
// Prof¬∫ Luiz Ot√°vio Miranda
// Ex008 - Numbers em JavaScript
// Isabelli Cristina Mocci - 05/03/2025
// =============================================================

/*
    üîπ O que s√£o Numbers?

    - Em JavaScript, `Number` √© o tipo de dado usado para representar n√∫meros inteiros e decimais.
    - Diferente de outras linguagens, **n√£o h√° distin√ß√£o entre inteiros e floats**.
    - Pode ser escrito de v√°rias formas:
        ‚úÖ Inteiro ‚Üí 10
        ‚úÖ Decimal ‚Üí 10.5
        ‚úÖ Nota√ß√£o cient√≠fica ‚Üí 1e3 (equivale a 1000)
*/

// =============================================================
// üîπ Exemplos Simples de Numbers
// =============================================================

const inteiro = 25;       // N√∫mero inteiro
const decimal = 3.14;     // N√∫mero decimal
const cientifico = 2e4;   // Nota√ß√£o cient√≠fica (2 * 10^4 = 20000)
const negativo = -10;     // N√∫mero negativo

console.log("N√∫mero inteiro:", inteiro);
console.log("N√∫mero decimal:", decimal);
console.log("Nota√ß√£o cient√≠fica:", cientifico);
console.log("N√∫mero negativo:", negativo);

// =============================================================
// üîπ Opera√ß√µes Matem√°ticas com Numbers
// =============================================================

const soma = 10 + 5;          // Adi√ß√£o
const subtracao = 10 - 5;     // Subtra√ß√£o
const multiplicacao = 10 * 5; // Multiplica√ß√£o
const divisao = 10 / 2;       // Divis√£o
const resto = 10 % 3;         // Resto da divis√£o

console.log("Soma:", soma);
console.log("Subtra√ß√£o:", subtracao);
console.log("Multiplica√ß√£o:", multiplicacao);
console.log("Divis√£o:", divisao);
console.log("Resto da divis√£o:", resto);

// =============================================================
// üîπ O JavaScript segue o padr√£o IEEE 754-2008 (64 bits ponto flutuante)
// =============================================================

// üìå Principais caracter√≠sticas:

// 1Ô∏è‚É£ Imprecis√µes em c√°lculos decimais:
console.log("0.1 + 0.2 =", 0.1 + 0.2); // 0.30000000000000004 üò¨

const numGrande = 9999999999999999; // M√°ximo que o JS pode lidar sem perder precis√£o
console.log("N√∫mero muito grande:", numGrande); // Exibe 10000000000000000 (perda de precis√£o)

// 2Ô∏è‚É£ O maior inteiro seguro no JS √© 2^53 - 1 (9007199254740991):
console.log("Maior inteiro seguro:", Number.MAX_SAFE_INTEGER);
console.log("Menor inteiro seguro:", Number.MIN_SAFE_INTEGER);

// 3Ô∏è‚É£ Suporte a Infinity e NaN:
console.log("1 / 0 =", 1 / 0); // Infinity
console.log("0 / 0 =", 0 / 0); // NaN

// 4Ô∏è‚É£ BigInt permite lidar com n√∫meros maiores que MAX_SAFE_INTEGER:
let big = 9007199254740991n + 1n;
console.log("BigInt:", big); // 9007199254740992n

// ‚ùå BigInt n√£o pode ser misturado com Number (gera erro)

// =============================================================
// üîπ Corrigindo a imprecis√£o de c√°lculos decimais
// =============================================================

const num1 = 0.1;
const num2 = 0.2;
const resultado = Number((num1 + num2).toFixed(2)); // Corrigindo a imprecis√£o
console.log("Soma corrigida:", resultado); // 0.3

// =============================================================
// üîπ Manipulando n√∫meros no JavaScript
// =============================================================

// üìå Defini√ß√£o de n√∫meros
let primeiroNumero = 1;
let segundoNumero = 2.5;

// üîπ Convers√£o number ‚Üí string
console.log("Concatena√ß√£o de n√∫mero com string:", primeiroNumero.toString() + segundoNumero);
console.log("Tipo original ainda √©:", typeof primeiroNumero);

// üîπ Verificando se um n√∫mero √© inteiro
console.log("√â um n√∫mero inteiro?", Number.isInteger(segundoNumero)); // false

// üîπ Convertendo permanentemente para string
primeiroNumero = primeiroNumero.toString();
console.log("Novo tipo de primeiroNumero:", typeof primeiroNumero);

// üîπ Convertendo n√∫mero para bin√°rio
let numeroBinario = 1500;
console.log("N√∫mero em bin√°rio:", numeroBinario.toString(2)); // "10111011100" (bin√°rio)

// üîπ Arredondando com casas decimais
let numeroDecimal = 10.5789551255547;
console.log("N√∫mero arredondado:", numeroDecimal.toFixed(2)); // "10.58"

// üîπ Verificando se um valor √© NaN (Not a Number)
let notANumber = primeiroNumero * "umaString";
console.log("√â NaN?", Number.isNaN(notANumber)); // true

// =============================================================
