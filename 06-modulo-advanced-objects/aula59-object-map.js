// =============================================================
// Curso de JavaScript e TypeScript - Aula 59: Object Map()
// Professor: Luiz Ot√°vio Miranda
// Criado por: Isabelli Cristina Mocci
// Data: 12/05/2025
// =============================================================

/*
    üîπ Map (Estrutura de Dados)

      ‚Üí `Map` √© um tipo de objeto: 
          ‚Ä¢ armazena pares chave‚Üívalor na ordem que foram inseridas
          ‚Ä¢ as chaves podem ser de qualquer tipo (n√∫mero, objeto, fun√ß√£o‚Ä¶)
          ‚Ä¢ Ppossui tamanho e m√©todos pr√≥prios

    üîπ Principais M√©todos:
      ‚Ä¢ `set(chave, valor)`     ‚Äì adiciona ou atualiza um par  
      ‚Ä¢ `get(chave)`            ‚Äì retorna o valor ou `undefined`  
      ‚Ä¢ `has(chave)`            ‚Äì verifica se a chave existe  
      ‚Ä¢ `delete(chave)`         ‚Äì remove o par (retorna true/false)  
      ‚Ä¢ `clear()`               ‚Äì limpa todo o Map  
      ‚Ä¢ `size`                  ‚Äì n√∫mero de pares no Map  
      ‚Ä¢ Itera√ß√£o: `map.keys()`, `map.values()`, `map.entries()`, `for‚Ä¶of map`

*/

// =============================================================
// üîπ Exemplo 1: Criando um Map a partir de um Array de Usu√°rios
// =============================================================

const users = [
  { id: 78082, name: 'Isa' },  
  { id: 78083, name: 'Isis' },  
  { id: 78081, name: 'Isac' }
];

const userMap = new Map();
for (const user of users) {
  userMap.set(user.id, user);
}

console.log(userMap);
// Sa√≠da: Map(3) { 78082 ‚áí {‚Ä¶}, 78083 ‚áí {‚Ä¶}, 78081 ‚áí {‚Ä¶} }

// Acessando um usu√°rio pelo ID:
console.log(userMap.get(78083)); // { id: 78083, name: 'Isis' }

// =============================================================
// üîπ Exemplo 2: Opera√ß√µes B√°sicas em Map
// =============================================================

console.log(userMap.has(78082));  // Sa√≠da: true
console.log(userMap.size);        // Sa√≠da: 3

// Atualizar valor:
userMap.set(78082, { id: 78082, name: 'Isa' });
console.log(userMap.get(78082));  // Sa√≠da: { id: 78082, name: 'Isa' }

// Remover um usu√°rio:
userMap.delete(78081);
console.log(userMap.size);        // Sa√≠da: 2

// Limpar todos:
userMap.clear();
console.log(userMap.size);        // Sa√≠da: 0

// =============================================================
// üîπ Exemplo 3: Iterando sobre Map
// =============================================================

const potions = new Map([
  ['cura',    { efeito: 'restaura 50 HP', pre√ßo: 25 }],
  ['energia', { efeito: 'restaura 30 MP', pre√ßo: 30 }],
  ['veneno',  { efeito: 'drena 20 HP',  pre√ßo: 40 }],
]);

// 1) Apenas chaves:
for (const key of potions.keys()) {
  console.log(`Po√ß√£o: ${key}`);
}

// 2) Apenas valores:
for (const valor of potions.values()) {
  console.log(`‚Üí`, valor);
}

// 3) Pares chave‚Üívalor:
for (const [nome, dados] of potions.entries()) {
  console.log(`${nome}: ${dados.efeito} por ${dados.pre√ßo} moedas`);
}

// 4) `forEach` tamb√©m funciona:
potions.forEach((dados, nome) => {
  console.log(`(forEach) ${nome} custa ${dados.pre√ßo}`);
});
