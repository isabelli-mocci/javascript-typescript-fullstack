// =============================================================
// Curso de JavaScript e TypeScript - Aula 54: M√©todos √öteis de Objetos
// Professor: Luiz Ot√°vio Miranda
// Criado por: Isabelli Cristina Mocci
// Data: 05/05/2025
// =============================================================

/*
    üîπ M√©todos e Ferramentas √∫teis de Objetos

    1. [...]spread operator 
    2. Object.assign() 
    3. Object.getOwnPropertyDescriptor() 
    4. Object.values()
    5. Object.entries() 
*/

// =============================================================
// üîπ Exemplo 1: [...] Spread Operator
// =============================================================

/* ‚ùì operador que permite expandir um objeto ou array em outro. */

const po√ß√£oOriginal = { tipo: 'cura', intensidade: 'alta' };
const po√ß√£oExtra = { cor: 'verde', pre√ßo: 20 };

const novaPo√ß√£o = { ...po√ß√£oOriginal, ...po√ß√£oExtra };

console.log(novaPo√ß√£o);
// Sa√≠da: { tipo: 'cura', intensidade: 'alta', cor: 'verde', pre√ßo: 20 }

// ==============================================================
// üîπ Exemplo 2: Object.assign()
// ==============================================================

/* ‚ùì copia as propriedades de um ou mais objetos de origem para um objeto de destino. */

const armaduraBase = { defesa: 50 };
const encantamento = { defesa: 70, resist√™ncia: 'gelo' };

const armaduraFinal = Object.assign({}, armaduraBase, encantamento);

console.log(armaduraFinal);
// Sa√≠da: { defesa: 70, resist√™ncia: 'gelo' }

// ==============================================================
// üîπ Exemplo 3: Object.getOwnPropertyDescriptor()
// ==============================================================

/* ‚ùì retorna um objeto que descreve as propriedades de um objeto, incluindo o valor, se √© configur√°vel, se √© enumer√°vel e se √© grav√°vel. */

const grimorio = { feiti√ßo: 'Fogo Azul' };

const detalhes = Object.getOwnPropertyDescriptor(grimorio, 'feiti√ßo');

console.log(detalhes);

/* Sa√≠da:
{
  value: 'Fogo Azul',
  writable: true,
  enumerable: true,
  configurable: true
}
*/

// ==============================================================
// üîπ Exemplo 4: Object.values()
// ==============================================================

/* ‚ùì retorna um array contendo os valores das propriedades de um objeto. */

const criatura = {
  nome: 'Wyvern',
  tipo: 'Drag√£o',
  nivel: 7
};

console.log(Object.values(criatura));
// Sa√≠da: [ 'Wyvern', 'Drag√£o', 7 ]

// ==============================================================
// üîπ Exemplo 5: Object.entries()
// ==============================================================

/* ‚ùì retorna um array contendo pares de chave-valor de um objeto. */

const artefato = {
  nome: 'C√°lice da Eternidade',
  poder: 'Imortalidade'
};

console.log(Object.entries(artefato));
// Sa√≠da: [ ['nome', 'C√°lice da Eternidade'], ['poder', 'Imortalidade'] ]

// üîπ Exemplo 5.1: √∫til quando combinado com for...of ou map():

for (let [chave, valor] of Object.entries(artefato)) {
  console.log(`${chave} ‚Üí ${valor}`);
}
// nome ‚Üí C√°lice da Eternidade
// poder ‚Üí Imortalidade

// ==============================================================