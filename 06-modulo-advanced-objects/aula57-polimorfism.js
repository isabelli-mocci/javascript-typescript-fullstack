// =============================================================
// Curso de JavaScript e TypeScript - Aula 57: Polimorfismo
// Professor: Luiz Ot√°vio Miranda
// Criado por: Isabelli Cristina Mocci
// Data: 12/05/2025
// =============================================================

/*
    üîπ Polimorfismo
      ‚Üí Conceito fundamental da POO
      ‚Üí Permite que diferentes objetos compartilhem o mesmo m√©todo
      ‚Üí Mas comportamentos espec√≠ficos para cada um.

    üîπ Como ocorre no JavaScript:
      - Comum no uso de prot√≥tipos, fun√ß√µes construtoras ou classes.
      - Implementado por meio da sobrescrita (override) de m√©todos herdados da SUPERclasse nas SUBclasses.
*/

// =============================================================
// üîπ Superclasse: Conta
// =============================================================

function Conta(agencia, conta, saldo) {
  this.agencia = agencia;
  this.conta = conta;
  this.saldo = saldo;
};

Conta.prototype.sacar = function(valor) {
  if (valor > this.saldo) {
    console.log(`‚ùå Saldo insuficiente: R$ ${this.saldo.toFixed(2)}`);
    return;
  }

  this.saldo -= valor;
  this.extrato();
};

Conta.prototype.depositar = function(valor) {
  this.saldo += valor;
  this.extrato();
};

Conta.prototype.extrato = function() {
  console.log(
    `üè¶ Ag/C.: ${this.agencia}/${this.conta} | ` +
    `üí∞ Saldo: R$${this.saldo.toFixed(2)}`
  );
};

// =============================================================
// üîπ Subclasse: Conta Corrente (com limite de saque)
// =============================================================

function ContaCorrente(agencia, conta, saldo, limite) {
  Conta.call(this, agencia, conta, saldo);
  this.limite = limite;
}

ContaCorrente.prototype = Object.create(Conta.prototype);
ContaCorrente.prototype.constructor = ContaCorrente;

ContaCorrente.prototype.sacar = function(valor) {
  if (valor > (this.saldo + this.limite)) {
    console.log(`‚ùå Saldo insuficiente (limite incluso): R$${this.saldo.toFixed(2)}`);
    return;
  }

  this.saldo -= valor;
  this.extrato();
};

// =============================================================
// üîπ Subclasse: Conta Poupan√ßa (sem limite adicional)
// =============================================================

function ContaPoupanca(agencia, conta, saldo, limite) {
  Conta.call(this, agencia, conta, saldo);
  this.limite = limite;
}

ContaPoupanca.prototype = Object.create(Conta.prototype);
ContaPoupanca.prototype.constructor = ContaPoupanca;

// =============================================================
// üîπ Demonstra√ß√£o: Polimorfismo em a√ß√£o
// =============================================================

const myContaCorrente = new ContaCorrente(11, 22, 0, 100);
myContaCorrente.depositar(10);  // üí∞ +10
myContaCorrente.sacar(110);     // -10 da conta e -100 do limite adicional
myContaCorrente.sacar(1);       // bloqueado: limite excedido

console.log(); // Separador visual

const myContaPoupanca = new ContaPoupanca(12, 33, 0);
myContaPoupanca.depositar(10);  // üí∞ +10
myContaPoupanca.sacar(10);      // saque ok
myContaPoupanca.sacar(1);       // saldo insuficiente