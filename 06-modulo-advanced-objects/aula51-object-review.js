// =============================================================
// Curso de JavaScript e TypeScript - Aula 51: Objects Review
// Professor: Luiz Ot√°vio Miranda
// Criado por: Isabelli Cristina Mocci
// Data: 25/04/2025
// =============================================================

/*
    üîπ Objetos em JavaScript

      ‚Üí Objetos s√£o cole√ß√µes de pares chave-valor
      ‚Üí Podem conter propriedades (dados) e m√©todos (fun√ß√µes)
      ‚Üí S√£o fundamentais para organizar e estruturar dados em JavaScript

    üîπ Sintaxe:
        const objeto = {
          chave: valor,
          m√©todo() { ... }
        };
*/

// =============================================================
//   üîπ Exemplo 1: Criando um Objeto Simples
// =============================================================

const feiticeira = {
  nome: 'Aelin Galathynius',
  reino: 'Terrasen',
  poder: 'Fogo',
  nivel: 100
};

console.log(`${feiticeira.nome} reina em ${feiticeira.reino} üî•`);
// Sa√≠da: Aelin Galathynius reina em Terrasen üî•

console.log(feiticeira['poder']); // ‚Üê nota√ß√£o de colchetes
// Sa√≠da: Fogo

// =============================================================
//   üîπ Exemplo 2: Adicionando e Modificando Propriedades
// =============================================================

const cavaleiro = {
  nome: 'Rowan Whitethorn',
  idade: 500,
  tipo: 'Guerreiro Fae',
  arma: 'Espada'
};

cavaleiro.magia = 'Vento';
cavaleiro.arma = 'Machado'; 
delete cavaleiro.idade;

console.log(cavaleiro);

/* Sa√≠da:
{
  nome: 'Rowan Whitethorn',
  tipo: 'Guerreiro Fae',
  arma: 'Machado',
  magia: 'Vento'
}*/

// =============================================================
//   üîπ Exemplo 3: Objetos com M√©todos
// =============================================================

const grimoire = {
  nome: 'Livro dos Sopros',
  feiti√ßos: ['Luz', 'Sombras', 'Tempestade'],
  usarFeiti√ßo: function(feiti√ßo) {
    return `Lan√ßando ${feiti√ßo} do ${this.nome}! ‚ú®`;
  }
};

console.log(grimoire.usarFeiti√ßo('Tempestade'));
// Sa√≠da: Lan√ßando Tempestade do Livro dos Sopros! ‚ú®

// =============================================================
//   üîπ Exemplo 4: Iterando Sobre Propriedades com for...in
// =============================================================

const artefato = {
  nome: 'Amuleto de Orynth',
  material: 'Ouro',
  poder: 'Prote√ß√£o'
};

for (let chave in artefato) {
  console.log(`${chave}: ${artefato[chave]}`);
}

/* Sa√≠da:
nome: Amuleto de Orynth
material: Ouro
poder: Prote√ß√£o
*/

// =============================================================
//   üîπ Exemplo 5: Objetos Aninhados
// =============================================================

const corteNoturna = {
  lider: {
    nome: 'Rhysand',
    poder: 'N√©voa e Sombras'
  },
  membros: [
    { nome: 'Cassian', habilidade: 'Combate' },
    { nome: 'Azriel', habilidade: 'Espionagem' }
  ]
};

console.log(`${corteNoturna.lider.nome} lidera com ${corteNoturna.lider.poder} üåå`);
// Sa√≠da: Rhysand lidera com N√©voa e Sombras üåå

console.log(corteNoturna.membros[1].nome); // Sa√≠da: Azriel

// =============================================================
//   üîπ Exemplo 6: Criando Objetos com new Object()
// =============================================================

/* ‚ùì new Object() cria um objeto vazio que pode ser preenchido com propriedades e m√©todos. */

const novaIlustracao = new Object();

novaIlustracao.tema = 'Fantasia √âpica';
novaIlustracao.personagem = 'Feyre Archeron';
novaIlustracao.preco = 80;
novaIlustracao.exibirDetalhes = function() {
  return `${this.personagem} em um cen√°rio de ${this.tema} por R$${this.preco}! üé®`;
};

console.log(novaIlustracao.exibirDetalhes());
// Sa√≠da: Feyre Archeron em um cen√°rio de Fantasia √âpica por R$80! üé®

console.log(novaIlustracao);

/* Sa√≠da:
{
  tema: 'Fantasia √âpica',
  personagem: 'Feyre Archeron',
  preco: 80,
  exibirDetalhes: [Function]
}*/

// =============================================================
//  üîπ Exemplo 7: Objetos com Factory Function
// =============================================================

/* ‚ùì Factory Function: fun√ß√£o que retorna um novo objeto. */

function criarPersonagem(nome, reino, poder) {
  return {
    nome,
    reino,
    poder,
    apresentar() {
      return `${this.nome} de ${this.reino} com poder de ${this.poder}!`;
    }
  };
}

const personagem1 = criarPersonagem('Aelin Galathynius', 'Terrasen', 'Fogo');
console.log(personagem1.apresentar());

// Sa√≠da: Aelin Galathynius de Terrasen com poder de Fogo!

// =============================================================
//  üîπ Exemplo 8: Objetos com Constructor Function
// =============================================================

/* ‚ùì Constructor Function: fun√ß√£o que cria objetos com a palavra-chave 'new'. */

function Personagem(nome, reino, poder) {
  this.nome = nome;
  this.reino = reino;
  this.poder = poder;
  this.apresentar = function() {
    return `${this.nome} de ${this.reino} com poder de ${this.poder}!`;
  };
}

const personagem2 = new Personagem('Feyre Archeron', 'Prithian', 'todos os Gr√£os-Senhores');
console.log(personagem2.apresentar());

// Sa√≠da: Feyre Archeron de Prithian com poder de Luz e Sombras!

// =============================================================
