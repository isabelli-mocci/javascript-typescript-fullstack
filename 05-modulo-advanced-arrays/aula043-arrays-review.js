// =============================================================
// Curso de JavaScript e TypeScript - Aula 43: Arrays Review
// Professor: Luiz Ot√°vio Miranda
// Criado por: Isabelli Cristina Mocci
// Data: 11/04/2025
// =============================================================

/*
    üîπ Arrays

      ‚Üí S√£o uma cole√ß√£o ordenada de dados que guardam qualquer tipo de dado.
      ‚Üí S√£o objetos (typeof array === 'object').
      ‚Üí S√£o indexados: cada elemento tem um √≠ndice, que come√ßa em 0.

    üîπ Duas formas de criar Arrays:

      1. nota√ß√£o literal:
        const array = [valor1, valor2, valor3, ...]

      2. construtor:
        const array = new Array(valor1, valor2, valor3, ...)

*/

// =============================================================
//   üîπ Manipula√ß√£o de Arrays:
// =============================================================
/*
‚Üí shift() - remove o primeiro elemento do array
‚Üí pop() - remove o √∫ltimo elemento do array
‚Üí unshift() - adiciona um elemento ao in√≠cio do array
‚Üí push() - adiciona um elemento ao final do array
‚Üí splice() - remove ou adiciona elementos em qualquer posi√ß√£o do array
    ‚Üí Primeiro par√¢metro: √≠ndice inicial
    ‚Üí Segundo par√¢metro: quantidade de itens a remover
    ‚Üí Terceiro (opcional): itens a adicionar
‚Üí delete - remove um elemento do array (deixa `empty item` e n√£o reduz length)

Exemplo:
*/

const herois = ['Arqueira', 'Mago', 'Guerreiro'];
herois.push('Bardo'); // adiciona 'Bardo' no final do array
herois.splice(1, 1, 'Druida'); // remove 1 item a partir do √≠ndice 1 e adiciona 'Druida' nessa posi√ß√£o

// =============================================================
//   üîπ M√©todos de Explora√ß√£o de Arrays
// =============================================================
/*
‚Üí forEach() - executa uma fun√ß√£o para cada elemento do array
‚Üí map() - cria um novo array com os resultados da fun√ß√£o aplicada a cada elemento
‚Üí filter() - cria um novo array com os elementos que passam no teste da fun√ß√£o
‚Üí find() - retorna o primeiro elemento que passa no teste da fun√ß√£o
‚Üí reduce() - aplica uma fun√ß√£o a cada elemento do array e retorna um √∫nico valor

Exemplo:
*/

const monstros = ['Orc', 'Goblin', 'Drag√£o'];
const gritos = monstros.map(m => m.toUpperCase()); // ['ORC', 'GOBLIN', 'DRAG√ÉO']

const golpes = [10, 20, 30];
const danoTotal = golpes.reduce((acum, val) => acum + val, 0);
console.log(danoTotal); // Sa√≠da: 60

// =============================================================
//   üîπ M√©todos de Organiza√ß√£o e Transforma√ß√£o de Arrays
// =============================================================
/*
‚Üí sort() - ordena os elementos do array
    ‚§∑ ordena como string por padr√£o
‚Üí reverse() - inverte a ordem dos elementos do array
‚Üí slice() - retorna uma c√≥pia de uma parte do array
‚Üí concat() - junta dois ou mais arrays
‚Üí join() - junta os elementos do array em uma string
‚Üí flat() - achata um array de arrays em um √∫nico array (um n√≠vel por padr√£o)
‚Üí flatMap() - aplica uma fun√ß√£o a cada elemento do array e achata o resultado (somente um n√≠vel)

Exemplo:
*/

const niveis = [10, 2, 30];
niveis.sort(); // [10, 2, 30] ‚ùå ordena√ß√£o incorreta como string
niveis.sort((a, b) => a - b); // [2, 10, 30] ‚úÖ ordena√ß√£o num√©rica correta

const relicarios = [['Anel'], ['Pingente']];
const todosItens = relicarios.flat(); // ['Anel', 'Pingente']

const magias = ['Fogo', 'Gelo'];
const combinadas = magias.flatMap(m => [m, `${m} Supremo`]);
// ['Fogo', 'Fogo Supremo', 'Gelo', 'Gelo Supremo']

// =============================================================
//   üîπ M√©todos de Verifica√ß√£o e Consultas de Arrays
// =============================================================
/*
‚Üí includes() - verifica se um elemento est√° presente no array
‚Üí findIndex() - retorna o √≠ndice do primeiro elemento que passa no teste da fun√ß√£o
‚Üí some() - verifica se pelo menos um elemento do array passa no teste da fun√ß√£o
‚Üí every() - verifica se todos os elementos do array passam no teste da fun√ß√£o
‚Üí indexOf() - retorna o √≠ndice do primeiro elemento encontrado no array
‚Üí lastIndexOf() - retorna o √≠ndice do √∫ltimo elemento encontrado no array
‚Üí entries() - retorna um objeto iterador com os pares chave/valor do array
‚Üí keys() - retorna um objeto iterador com os √≠ndices do array
‚Üí values() - retorna um objeto iterador com os valores do array
‚Üí fill() - preenche todos os elementos do array com um valor

Exemplo:
*/

const criaturas = ['Drag√£o', 'Orc', 'Elfo'];
const todosS√£oOrcs = criaturas.every(c => c === 'Orc'); // false
const existeOrc = criaturas.some(c => c === 'Orc'); // true

const slots = new Array(3).fill('Po√ß√£o'); // ['Po√ß√£o', 'Po√ß√£o', 'Po√ß√£o']

const party = ['Lucas', 'Jo√£o', 'Maria', 'Ana', 'Pedro'];
party[0] = 'Matheus'; // troca o guerreiro principal

delete party[2]; // remove Maria, mas o slot vira 'vazio'
console.log(party); // Sa√≠da: ['Matheus', 'Jo√£o', empty, 'Ana', 'Pedro']
console.log(party[0]); // Sa√≠da: Matheus

// =============================================================
//   üîπ Resumo
// =============================================================

/*
| ---------------|------------------------------------------------------|
| Tipo de M√©todo | 	        Exemplos	           |  Retorna novo array? |
| ---------------|------------------------------------------------------|
| Manipula√ß√£o    |  push, pop, shift, splice	   |  N√£o                 |
| Explora√ß√£o	   |  forEach, map, filter, find	 |  map, filter sim     |
| Transforma√ß√£o	 |  sort, reverse, slice, flat	 |  slice, flat sim     |
| Verifica√ß√£o	   |  includes, every, some	       |  N√£o                 |
| ---------------|------------------------------------------------------|
*/
